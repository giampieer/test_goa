// Code generated by goa v3.0.10, DO NOT EDIT.
//
// calc HTTP client CLI support package
//
// Command:
// $ goa gen calc/design

package client

import (
	calc "calc/gen/calc"
	"fmt"
	"strconv"
)

// BuildAddPayload builds the payload for the calc add endpoint from CLI flags.
func BuildAddPayload(calcAddA string, calcAddB string) (*calc.AddPayload, error) {
	var err error
	var a int
	{
		var v int64
		v, err = strconv.ParseInt(calcAddA, 10, 64)
		a = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for a, must be INT")
		}
	}
	var b int
	{
		var v int64
		v, err = strconv.ParseInt(calcAddB, 10, 64)
		b = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for b, must be INT")
		}
	}
	payload := &calc.AddPayload{
		A: a,
		B: b,
	}
	return payload, nil
}

// BuildRestaPayload builds the payload for the calc resta endpoint from CLI
// flags.
func BuildRestaPayload(calcRestaA string, calcRestaB string) (*calc.RestaPayload, error) {
	var err error
	var a int
	{
		var v int64
		v, err = strconv.ParseInt(calcRestaA, 10, 64)
		a = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for a, must be INT")
		}
	}
	var b int
	{
		var v int64
		v, err = strconv.ParseInt(calcRestaB, 10, 64)
		b = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for b, must be INT")
		}
	}
	payload := &calc.RestaPayload{
		A: a,
		B: b,
	}
	return payload, nil
}

// BuildMultiplicacionPayload builds the payload for the calc multiplicacion
// endpoint from CLI flags.
func BuildMultiplicacionPayload(calcMultiplicacionA string, calcMultiplicacionB string) (*calc.MultiplicacionPayload, error) {
	var err error
	var a int
	{
		var v int64
		v, err = strconv.ParseInt(calcMultiplicacionA, 10, 64)
		a = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for a, must be INT")
		}
	}
	var b int
	{
		var v int64
		v, err = strconv.ParseInt(calcMultiplicacionB, 10, 64)
		b = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for b, must be INT")
		}
	}
	payload := &calc.MultiplicacionPayload{
		A: a,
		B: b,
	}
	return payload, nil
}

// BuildDivisionPayload builds the payload for the calc division endpoint from
// CLI flags.
func BuildDivisionPayload(calcDivisionA string, calcDivisionB string) (*calc.DivisionPayload, error) {
	var err error
	var a int
	{
		var v int64
		v, err = strconv.ParseInt(calcDivisionA, 10, 64)
		a = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for a, must be INT")
		}
	}
	var b int
	{
		var v int64
		v, err = strconv.ParseInt(calcDivisionB, 10, 64)
		b = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for b, must be INT")
		}
	}
	payload := &calc.DivisionPayload{
		A: a,
		B: b,
	}
	return payload, nil
}
