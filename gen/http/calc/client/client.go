// Code generated by goa v3.0.10, DO NOT EDIT.
//
// calc client HTTP transport
//
// Command:
// $ goa gen calc/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the calc service endpoint HTTP clients.
type Client struct {
	// Add Doer is the HTTP client used to make requests to the add endpoint.
	AddDoer goahttp.Doer

	// Resta Doer is the HTTP client used to make requests to the resta endpoint.
	RestaDoer goahttp.Doer

	// Multiplicacion Doer is the HTTP client used to make requests to the
	// multiplicacion endpoint.
	MultiplicacionDoer goahttp.Doer

	// Division Doer is the HTTP client used to make requests to the division
	// endpoint.
	DivisionDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the calc service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		AddDoer:             doer,
		RestaDoer:           doer,
		MultiplicacionDoer:  doer,
		DivisionDoer:        doer,
		RestoreResponseBody: restoreBody,
		scheme:              scheme,
		host:                host,
		decoder:             dec,
		encoder:             enc,
	}
}

// Add returns an endpoint that makes HTTP requests to the calc service add
// server.
func (c *Client) Add() goa.Endpoint {
	var (
		decodeResponse = DecodeAddResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildAddRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.AddDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("calc", "add", err)
		}
		return decodeResponse(resp)
	}
}

// Resta returns an endpoint that makes HTTP requests to the calc service resta
// server.
func (c *Client) Resta() goa.Endpoint {
	var (
		decodeResponse = DecodeRestaResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildRestaRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.RestaDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("calc", "resta", err)
		}
		return decodeResponse(resp)
	}
}

// Multiplicacion returns an endpoint that makes HTTP requests to the calc
// service multiplicacion server.
func (c *Client) Multiplicacion() goa.Endpoint {
	var (
		decodeResponse = DecodeMultiplicacionResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildMultiplicacionRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.MultiplicacionDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("calc", "multiplicacion", err)
		}
		return decodeResponse(resp)
	}
}

// Division returns an endpoint that makes HTTP requests to the calc service
// division server.
func (c *Client) Division() goa.Endpoint {
	var (
		decodeResponse = DecodeDivisionResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildDivisionRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DivisionDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("calc", "division", err)
		}
		return decodeResponse(resp)
	}
}
