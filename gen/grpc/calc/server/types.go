// Code generated by goa v3.0.10, DO NOT EDIT.
//
// calc gRPC server types
//
// Command:
// $ goa gen calc/design

package server

import (
	calc "calc/gen/calc"
	calcpb "calc/gen/grpc/calc/pb"
)

// NewAddPayload builds the payload of the "add" endpoint of the "calc" service
// from the gRPC request type.
func NewAddPayload(message *calcpb.AddRequest) *calc.AddPayload {
	v := &calc.AddPayload{
		A: int(message.A),
		B: int(message.B),
	}
	return v
}

// NewAddResponse builds the gRPC response type from the result of the "add"
// endpoint of the "calc" service.
func NewAddResponse(result int) *calcpb.AddResponse {
	message := &calcpb.AddResponse{}
	message.Field = int32(result)
	return message
}

// NewRestaPayload builds the payload of the "resta" endpoint of the "calc"
// service from the gRPC request type.
func NewRestaPayload(message *calcpb.RestaRequest) *calc.RestaPayload {
	v := &calc.RestaPayload{
		A: int(message.A),
		B: int(message.B),
	}
	return v
}

// NewRestaResponse builds the gRPC response type from the result of the
// "resta" endpoint of the "calc" service.
func NewRestaResponse(result int) *calcpb.RestaResponse {
	message := &calcpb.RestaResponse{}
	message.Field = int32(result)
	return message
}

// NewMultiplicacionPayload builds the payload of the "multiplicacion" endpoint
// of the "calc" service from the gRPC request type.
func NewMultiplicacionPayload(message *calcpb.MultiplicacionRequest) *calc.MultiplicacionPayload {
	v := &calc.MultiplicacionPayload{
		A: int(message.A),
		B: int(message.B),
	}
	return v
}

// NewMultiplicacionResponse builds the gRPC response type from the result of
// the "multiplicacion" endpoint of the "calc" service.
func NewMultiplicacionResponse(result int) *calcpb.MultiplicacionResponse {
	message := &calcpb.MultiplicacionResponse{}
	message.Field = int32(result)
	return message
}

// NewDivisionPayload builds the payload of the "division" endpoint of the
// "calc" service from the gRPC request type.
func NewDivisionPayload(message *calcpb.DivisionRequest) *calc.DivisionPayload {
	v := &calc.DivisionPayload{
		A: int(message.A),
		B: int(message.B),
	}
	return v
}

// NewDivisionResponse builds the gRPC response type from the result of the
// "division" endpoint of the "calc" service.
func NewDivisionResponse(result int) *calcpb.DivisionResponse {
	message := &calcpb.DivisionResponse{}
	message.Field = int32(result)
	return message
}
