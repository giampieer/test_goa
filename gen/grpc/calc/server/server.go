// Code generated by goa v3.0.10, DO NOT EDIT.
//
// calc gRPC server
//
// Command:
// $ goa gen calc/design

package server

import (
	calc "calc/gen/calc"
	calcpb "calc/gen/grpc/calc/pb"
	"context"

	goagrpc "goa.design/goa/v3/grpc"
	goa "goa.design/goa/v3/pkg"
)

// Server implements the calcpb.CalcServer interface.
type Server struct {
	AddH            goagrpc.UnaryHandler
	RestaH          goagrpc.UnaryHandler
	MultiplicacionH goagrpc.UnaryHandler
	DivisionH       goagrpc.UnaryHandler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the expr.
type ErrorNamer interface {
	ErrorName() string
}

// New instantiates the server struct with the calc service endpoints.
func New(e *calc.Endpoints, uh goagrpc.UnaryHandler) *Server {
	return &Server{
		AddH:            NewAddHandler(e.Add, uh),
		RestaH:          NewRestaHandler(e.Resta, uh),
		MultiplicacionH: NewMultiplicacionHandler(e.Multiplicacion, uh),
		DivisionH:       NewDivisionHandler(e.Division, uh),
	}
}

// NewAddHandler creates a gRPC handler which serves the "calc" service "add"
// endpoint.
func NewAddHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeAddRequest, EncodeAddResponse)
	}
	return h
}

// Add implements the "Add" method in calcpb.CalcServer interface.
func (s *Server) Add(ctx context.Context, message *calcpb.AddRequest) (*calcpb.AddResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "add")
	ctx = context.WithValue(ctx, goa.ServiceKey, "calc")
	resp, err := s.AddH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*calcpb.AddResponse), nil
}

// NewRestaHandler creates a gRPC handler which serves the "calc" service
// "resta" endpoint.
func NewRestaHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeRestaRequest, EncodeRestaResponse)
	}
	return h
}

// Resta implements the "Resta" method in calcpb.CalcServer interface.
func (s *Server) Resta(ctx context.Context, message *calcpb.RestaRequest) (*calcpb.RestaResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "resta")
	ctx = context.WithValue(ctx, goa.ServiceKey, "calc")
	resp, err := s.RestaH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*calcpb.RestaResponse), nil
}

// NewMultiplicacionHandler creates a gRPC handler which serves the "calc"
// service "multiplicacion" endpoint.
func NewMultiplicacionHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeMultiplicacionRequest, EncodeMultiplicacionResponse)
	}
	return h
}

// Multiplicacion implements the "Multiplicacion" method in calcpb.CalcServer
// interface.
func (s *Server) Multiplicacion(ctx context.Context, message *calcpb.MultiplicacionRequest) (*calcpb.MultiplicacionResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "multiplicacion")
	ctx = context.WithValue(ctx, goa.ServiceKey, "calc")
	resp, err := s.MultiplicacionH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*calcpb.MultiplicacionResponse), nil
}

// NewDivisionHandler creates a gRPC handler which serves the "calc" service
// "division" endpoint.
func NewDivisionHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeDivisionRequest, EncodeDivisionResponse)
	}
	return h
}

// Division implements the "Division" method in calcpb.CalcServer interface.
func (s *Server) Division(ctx context.Context, message *calcpb.DivisionRequest) (*calcpb.DivisionResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "division")
	ctx = context.WithValue(ctx, goa.ServiceKey, "calc")
	resp, err := s.DivisionH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*calcpb.DivisionResponse), nil
}
