// Code generated by goa v3.0.10, DO NOT EDIT.
//
// calc gRPC client CLI support package
//
// Command:
// $ goa gen calc/design

package client

import (
	calc "calc/gen/calc"
	calcpb "calc/gen/grpc/calc/pb"
	"encoding/json"
	"fmt"
)

// BuildAddPayload builds the payload for the calc add endpoint from CLI flags.
func BuildAddPayload(calcAddMessage string) (*calc.AddPayload, error) {
	var err error
	var message calcpb.AddRequest
	{
		if calcAddMessage != "" {
			err = json.Unmarshal([]byte(calcAddMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, example of valid JSON:\n%s", "'{\n      \"a\": 5850431520333673251,\n      \"b\": 1089204046671954241\n   }'")
			}
		}
	}
	v := &calc.AddPayload{
		A: int(message.A),
		B: int(message.B),
	}
	return v, nil
}

// BuildRestaPayload builds the payload for the calc resta endpoint from CLI
// flags.
func BuildRestaPayload(calcRestaMessage string) (*calc.RestaPayload, error) {
	var err error
	var message calcpb.RestaRequest
	{
		if calcRestaMessage != "" {
			err = json.Unmarshal([]byte(calcRestaMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, example of valid JSON:\n%s", "'{\n      \"a\": 8614350958614154271,\n      \"b\": 4285228716133201605\n   }'")
			}
		}
	}
	v := &calc.RestaPayload{
		A: int(message.A),
		B: int(message.B),
	}
	return v, nil
}

// BuildMultiplicacionPayload builds the payload for the calc multiplicacion
// endpoint from CLI flags.
func BuildMultiplicacionPayload(calcMultiplicacionMessage string) (*calc.MultiplicacionPayload, error) {
	var err error
	var message calcpb.MultiplicacionRequest
	{
		if calcMultiplicacionMessage != "" {
			err = json.Unmarshal([]byte(calcMultiplicacionMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, example of valid JSON:\n%s", "'{\n      \"a\": 6525775414444532386,\n      \"b\": 5635247262153220700\n   }'")
			}
		}
	}
	v := &calc.MultiplicacionPayload{
		A: int(message.A),
		B: int(message.B),
	}
	return v, nil
}

// BuildDivisionPayload builds the payload for the calc division endpoint from
// CLI flags.
func BuildDivisionPayload(calcDivisionMessage string) (*calc.DivisionPayload, error) {
	var err error
	var message calcpb.DivisionRequest
	{
		if calcDivisionMessage != "" {
			err = json.Unmarshal([]byte(calcDivisionMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, example of valid JSON:\n%s", "'{\n      \"a\": 5487677923305002774,\n      \"b\": 1187293393747494935\n   }'")
			}
		}
	}
	v := &calc.DivisionPayload{
		A: int(message.A),
		B: int(message.B),
	}
	return v, nil
}
