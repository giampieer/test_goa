// Code generated by goa v3.0.10, DO NOT EDIT.
//
// calc gRPC client encoders and decoders
//
// Command:
// $ goa gen calc/design

package client

import (
	calc "calc/gen/calc"
	calcpb "calc/gen/grpc/calc/pb"
	"context"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildAddFunc builds the remote method to invoke for "calc" service "add"
// endpoint.
func BuildAddFunc(grpccli calcpb.CalcClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Add(ctx, reqpb.(*calcpb.AddRequest), opts...)
		}
		return grpccli.Add(ctx, &calcpb.AddRequest{}, opts...)
	}
}

// EncodeAddRequest encodes requests sent to calc add endpoint.
func EncodeAddRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*calc.AddPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("calc", "add", "*calc.AddPayload", v)
	}
	return NewAddRequest(payload), nil
}

// DecodeAddResponse decodes responses from the calc add endpoint.
func DecodeAddResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*calcpb.AddResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("calc", "add", "*calcpb.AddResponse", v)
	}
	res := NewAddResult(message)
	return res, nil
}

// BuildRestaFunc builds the remote method to invoke for "calc" service "resta"
// endpoint.
func BuildRestaFunc(grpccli calcpb.CalcClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Resta(ctx, reqpb.(*calcpb.RestaRequest), opts...)
		}
		return grpccli.Resta(ctx, &calcpb.RestaRequest{}, opts...)
	}
}

// EncodeRestaRequest encodes requests sent to calc resta endpoint.
func EncodeRestaRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*calc.RestaPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("calc", "resta", "*calc.RestaPayload", v)
	}
	return NewRestaRequest(payload), nil
}

// DecodeRestaResponse decodes responses from the calc resta endpoint.
func DecodeRestaResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*calcpb.RestaResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("calc", "resta", "*calcpb.RestaResponse", v)
	}
	res := NewRestaResult(message)
	return res, nil
}

// BuildMultiplicacionFunc builds the remote method to invoke for "calc"
// service "multiplicacion" endpoint.
func BuildMultiplicacionFunc(grpccli calcpb.CalcClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Multiplicacion(ctx, reqpb.(*calcpb.MultiplicacionRequest), opts...)
		}
		return grpccli.Multiplicacion(ctx, &calcpb.MultiplicacionRequest{}, opts...)
	}
}

// EncodeMultiplicacionRequest encodes requests sent to calc multiplicacion
// endpoint.
func EncodeMultiplicacionRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*calc.MultiplicacionPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("calc", "multiplicacion", "*calc.MultiplicacionPayload", v)
	}
	return NewMultiplicacionRequest(payload), nil
}

// DecodeMultiplicacionResponse decodes responses from the calc multiplicacion
// endpoint.
func DecodeMultiplicacionResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*calcpb.MultiplicacionResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("calc", "multiplicacion", "*calcpb.MultiplicacionResponse", v)
	}
	res := NewMultiplicacionResult(message)
	return res, nil
}

// BuildDivisionFunc builds the remote method to invoke for "calc" service
// "division" endpoint.
func BuildDivisionFunc(grpccli calcpb.CalcClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Division(ctx, reqpb.(*calcpb.DivisionRequest), opts...)
		}
		return grpccli.Division(ctx, &calcpb.DivisionRequest{}, opts...)
	}
}

// EncodeDivisionRequest encodes requests sent to calc division endpoint.
func EncodeDivisionRequest(ctx context.Context, v interface{}, md *metadata.MD) (interface{}, error) {
	payload, ok := v.(*calc.DivisionPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("calc", "division", "*calc.DivisionPayload", v)
	}
	return NewDivisionRequest(payload), nil
}

// DecodeDivisionResponse decodes responses from the calc division endpoint.
func DecodeDivisionResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*calcpb.DivisionResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("calc", "division", "*calcpb.DivisionResponse", v)
	}
	res := NewDivisionResult(message)
	return res, nil
}
