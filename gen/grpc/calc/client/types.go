// Code generated by goa v3.0.10, DO NOT EDIT.
//
// calc gRPC client types
//
// Command:
// $ goa gen calc/design

package client

import (
	calc "calc/gen/calc"
	calcpb "calc/gen/grpc/calc/pb"
)

// NewAddRequest builds the gRPC request type from the payload of the "add"
// endpoint of the "calc" service.
func NewAddRequest(payload *calc.AddPayload) *calcpb.AddRequest {
	message := &calcpb.AddRequest{
		A: int32(payload.A),
		B: int32(payload.B),
	}
	return message
}

// NewAddResult builds the result type of the "add" endpoint of the "calc"
// service from the gRPC response type.
func NewAddResult(message *calcpb.AddResponse) int {
	result := int(message.Field)
	return result
}

// NewRestaRequest builds the gRPC request type from the payload of the "resta"
// endpoint of the "calc" service.
func NewRestaRequest(payload *calc.RestaPayload) *calcpb.RestaRequest {
	message := &calcpb.RestaRequest{
		A: int32(payload.A),
		B: int32(payload.B),
	}
	return message
}

// NewRestaResult builds the result type of the "resta" endpoint of the "calc"
// service from the gRPC response type.
func NewRestaResult(message *calcpb.RestaResponse) int {
	result := int(message.Field)
	return result
}

// NewMultiplicacionRequest builds the gRPC request type from the payload of
// the "multiplicacion" endpoint of the "calc" service.
func NewMultiplicacionRequest(payload *calc.MultiplicacionPayload) *calcpb.MultiplicacionRequest {
	message := &calcpb.MultiplicacionRequest{
		A: int32(payload.A),
		B: int32(payload.B),
	}
	return message
}

// NewMultiplicacionResult builds the result type of the "multiplicacion"
// endpoint of the "calc" service from the gRPC response type.
func NewMultiplicacionResult(message *calcpb.MultiplicacionResponse) int {
	result := int(message.Field)
	return result
}

// NewDivisionRequest builds the gRPC request type from the payload of the
// "division" endpoint of the "calc" service.
func NewDivisionRequest(payload *calc.DivisionPayload) *calcpb.DivisionRequest {
	message := &calcpb.DivisionRequest{
		A: int32(payload.A),
		B: int32(payload.B),
	}
	return message
}

// NewDivisionResult builds the result type of the "division" endpoint of the
// "calc" service from the gRPC response type.
func NewDivisionResult(message *calcpb.DivisionResponse) int {
	result := int(message.Field)
	return result
}
